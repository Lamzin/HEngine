/**
 * @author VaL Doroshchuk
 * @license GNU GPL v2
 */

#include "HEngine_sn.h"
#include "gtest/gtest.h"

using namespace hengine;

TEST( HEngine_sn, DefaultConstructor )
{
    HEngine_sn e( BinTable(), 0 );
}

TEST( HEngine_sn, Build )
{
    BinTable t;
    t.push_back( "1111111111111111111110000000000000000000001111111111111111111111" );
    t.push_back( "0000000000000000000001111111111111111111110000000000000000000000" );
    t.push_back( "1111111111100000000001111111111100000000001111111111000000000000" );
    t.push_back( "1010101010101010101010101010101010101010101010101010101010101010" );

    HEngine_sn e( t, 4 );

    const SignatureSet set = e.getSignatureSet();
    EXPECT_EQ( 3, set.size() );
    EXPECT_EQ( 4, set[0].size() );
    EXPECT_EQ( 4, set[1].size() );
    EXPECT_EQ( 4, set[2].size() );

    EXPECT_EQ( "000000000000000000000", set[0][0].second[0] );
    EXPECT_EQ( "111111111111111111111", set[0][0].second[1] );
    EXPECT_EQ( "0000000000000000000000", set[0][0].second[2] );

    EXPECT_EQ( "101010101010101010101", set[0][1].second[0] );
    EXPECT_EQ( "010101010101010101010", set[0][1].second[1] );
    EXPECT_EQ( "1010101010101010101010", set[0][1].second[2] );

    EXPECT_EQ( "111111111110000000000", set[0][2].second[0] );
    EXPECT_EQ( "111111111110000000000", set[0][2].second[1] );
    EXPECT_EQ( "1111111111000000000000", set[0][2].second[2] );

    EXPECT_EQ( "111111111111111111111", set[0][3].second[0] );
    EXPECT_EQ( "000000000000000000000", set[0][3].second[1] );
    EXPECT_EQ( "1111111111111111111111", set[0][3].second[2] );

    EXPECT_EQ( "000000000000000000000", set[1][0].second[0] );
    EXPECT_EQ( "111111111111111111111", set[1][0].second[1] );
    EXPECT_EQ( "1111111111111111111111", set[1][0].second[2] );

    EXPECT_EQ( "010101010101010101010", set[1][1].second[0] );
    EXPECT_EQ( "101010101010101010101", set[1][1].second[1] );
    EXPECT_EQ( "1010101010101010101010", set[1][1].second[2] );

    EXPECT_EQ( "0000000000000000000000", set[2][0].second[0] );
    EXPECT_EQ( "000000000000000000000", set[2][0].second[1] );
    EXPECT_EQ( "111111111111111111111", set[2][0].second[2] );

    EXPECT_EQ( "1010101010101010101010", set[2][1].second[0] );
    EXPECT_EQ( "101010101010101010101", set[2][1].second[1] );
    EXPECT_EQ( "010101010101010101010", set[2][1].second[2] );

}

TEST( HEngine_sn, Query4 )
{
    BinTable t;
    t.push_back( "1111111111111111111110000000000000000000001111111111111111111111" );
    t.push_back( "0000000000000000000001111111111111111111110000000000000000000000" );
    t.push_back( "1111111111100000000001111111111100000000001111111111000000000000" );
    t.push_back( "1010101010101010101010101010101010101010101010101010101010101010" );
    t.push_back( "0100111110111010010111011010001001111111101000101101111110100011" );
    t.push_back( "0110110101001100100000111010001010111110100010100011101010110011" );
    t.push_back( "0110110110111100111011001010011001110110000100101111010110000011" );
    t.push_back( "0011010110101110100111011000001001100111101100000111011110100011" );
    t.push_back( "0100011010101110111111010000111011110011101100101111110100100011" );
    t.push_back( "0011110110111010111111001010000001010111011100101111110110100001" );

    HEngine_sn e( t, 4 );
    Matches r = e.query( "1111111111111111111110000000000000000000001111111111111111111100" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "1111111111111111111110000000000000000000001111111111111111111111", (*(r.begin())).first );

    r = e.query( "1111111111111111111110000000000000000000001111111111111111110000" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "1111111111111111111110000000000000000000001111111111111111111111", (*(r.begin())).first );

    r = e.query( "1111111111111111111110000000000000000000001111111111111111100000" );
    EXPECT_EQ( 0, r.size() );

    r = e.query( "0000000000000001000001111111111111111111110000000000010000000000" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "0000000000000000000001111111111111111111110000000000000000000000", (*(r.begin())).first );

    r = e.query( "1000000000000001000001111111111111111011110000000000010000000000" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "0000000000000000000001111111111111111111110000000000000000000000", (*(r.begin())).first );

    r = e.query( "0011110110111010111111001011111001010111011100101111110110100001" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "0011110110111010111111001010000001010111011100101111110110100001", (*(r.begin())).first );

    r = e.query( "1110110110111100111011001010011001110110000100101111010110000011" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "0110110110111100111011001010011001110110000100101111010110000011", (*(r.begin())).first );

    r = e.query( "1111111111111110010111011010001001111111101000101101111110100011" );
    EXPECT_EQ( 0, r.size() );

    r = e.query( "1010101010101010101010101010101010101010101010101010101010101010" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "1010101010101010101010101010101010101010101010101010101010101010", (*(r.begin())).first );

    r = e.query( "1010101010101010101010111111111010101010101010101010101010101010" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "1010101010101010101010101010101010101010101010101010101010101010", (*(r.begin())).first );

}

TEST( HEngine_sn, Query0 )
{
    BinTable t;
    t.push_back( "1111111111111111111110000000000000000000001111111111111111111111" );
    t.push_back( "0000000000000000000001111111111111111111110000000000000000000000" );
    t.push_back( "1111111111100000000001111111111100000000001111111111000000000000" );
    t.push_back( "1010101010101010101010101010101010101010101010101010101010101010" );
    t.push_back( "0100111110111010010111011010001001111111101000101101111110100011" );
    t.push_back( "0110110101001100100000111010001010111110100010100011101010110011" );
    t.push_back( "0110110110111100111011001010011001110110000100101111010110000011" );
    t.push_back( "0011010110101110100111011000001001100111101100000111011110100011" );
    t.push_back( "0100011010101110111111010000111011110011101100101111110100100011" );
    t.push_back( "0011110110111010111111001010000001010111011100101111110110100001" );

    HEngine_sn e( t, 0 );
    Matches r = e.query( "1111111111111111111110000000000000000000001111111111111111111111" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "1111111111111111111110000000000000000000001111111111111111111111", (*(r.begin())).first );

    r = e.query( "0000000000000000000001111111111111111111110000000000000000000000" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "0000000000000000000001111111111111111111110000000000000000000000", (*(r.begin())).first );

    r = e.query( "1111111111100000000001111111111100000000001111111111000000000000" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "1111111111100000000001111111111100000000001111111111000000000000", (*(r.begin())).first );

    r = e.query( "1010101010101010101010101010101010101010101010101010101010101010" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "1010101010101010101010101010101010101010101010101010101010101010", (*(r.begin())).first );

    r = e.query( "0011110110111010111111001010000001010111011100101111110110100001" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "0011110110111010111111001010000001010111011100101111110110100001", (*(r.begin())).first );
}

TEST( HEngine_sn, Query1 )
{
    BinTable t;
    t.push_back( "1111111111111111111110000000000000000000001111111111111111111111" );
    t.push_back( "0000000000000000000001111111111111111111110000000000000000000000" );
    t.push_back( "1111111111100000000001111111111100000000001111111111000000000000" );
    t.push_back( "1010101010101010101010101010101010101010101010101010101010101010" );
    t.push_back( "0100111110111010010111011010001001111111101000101101111110100011" );
    t.push_back( "0110110101001100100000111010001010111110100010100011101010110011" );
    t.push_back( "0110110110111100111011001010011001110110000100101111010110000011" );
    t.push_back( "0011010110101110100111011000001001100111101100000111011110100011" );
    t.push_back( "0100011010101110111111010000111011110011101100101111110100100011" );
    t.push_back( "0011110110111010111111001010000001010111011100101111110110100001" );

    HEngine_sn e( t, 1 );
    Matches r = e.query( "1111111111111111111110000000000000000000001111111111111111111111" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "1111111111111111111110000000000000000000001111111111111111111111", (*(r.begin())).first );

    r = e.query( "0000000000000000000001111111111111111111110000000000000000000000" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "0000000000000000000001111111111111111111110000000000000000000000", (*(r.begin())).first );

    r = e.query( "1111111111111111111110000000000000000000001111111111111111111110" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "1111111111111111111110000000000000000000001111111111111111111111", (*(r.begin())).first );

    r = e.query( "1010101010101010111010101010101010101010101010101010101010101010" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "1010101010101010101010101010101010101010101010101010101010101010", (*(r.begin())).first );

    r = e.query( "0011110110111010111111001010000000010111011100101111110110100001" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "0011110110111010111111001010000001010111011100101111110110100001", (*(r.begin())).first );
}

TEST( HEngine_sn, Query7 )
{
    BinTable t;
    t.push_back( "1111111111111111111110000000000000000000001111111111111111111111" );
    t.push_back( "0000000000000000000001111111111111111111110000000000000000000000" );
    t.push_back( "1111111111100000000001111111111100000000001111111111000000000000" );
    t.push_back( "1010101010101010101010101010101010101010101010101010101010101010" );
    t.push_back( "0100111110111010010111011010001001111111101000101101111110100011" );
    t.push_back( "0110110101001100100000111010001010111110100010100011101010110011" );
    t.push_back( "0110110110111100111011001010011001110110000100101111010110000011" );
    t.push_back( "0011010110101110100111011000001001100111101100000111011110100011" );
    t.push_back( "0100011010101110111111010000111011110011101100101111110100100011" );
    t.push_back( "0011110110111010111111001010000001010111011100101111110110100001" );

    HEngine_sn e( t, 7 );
    Matches r = e.query( "1111111111111111111110000000000000000000001111111111111111111111" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "1111111111111111111110000000000000000000001111111111111111111111", (*(r.begin())).first );

    r = e.query( "1111111111111111111110000000001000000000001111111111111111111111" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "1111111111111111111110000000000000000000001111111111111111111111", (*(r.begin())).first );

    r = e.query( "1111111111111111111110000000001100000000001111111111111111111111" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "1111111111111111111110000000000000000000001111111111111111111111", (*(r.begin())).first );

    r = e.query( "1111111111111111111110000000001110000000001111111111111111111111" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "1111111111111111111110000000000000000000001111111111111111111111", (*(r.begin())).first );

    r = e.query( "1111111111111111111110000000001111000000001111111111111111111111" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "1111111111111111111110000000000000000000001111111111111111111111", (*(r.begin())).first );

    r = e.query( "1111111111111111111110000000001111100000001111111111111111111111" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "1111111111111111111110000000000000000000001111111111111111111111", (*(r.begin())).first );

    r = e.query( "1111111111111111111110000000001111100000001111111111111111111111" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "1111111111111111111110000000000000000000001111111111111111111111", (*(r.begin())).first );

    r = e.query( "1111111111111111111110000000001111110000001111111111111111111111" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "1111111111111111111110000000000000000000001111111111111111111111", (*(r.begin())).first );

    r = e.query( "1111111111111111111110000000001111111000001111111111111111111111" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "1111111111111111111110000000000000000000001111111111111111111111", (*(r.begin())).first );

    r = e.query( "1111111111111111111110000000001111111100001111111111111111111111" );
    EXPECT_EQ( 0, r.size() );

    r = e.query( "1100111110111010011111011110001001101111101000101101111110101010" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "0100111110111010010111011010001001111111101000101101111110100011", (*(r.begin())).first );


}

TEST( HEngine_sn, Query10 )
{
    BinTable t;
    t.push_back( "1111111111111111111110000000000000000000001111111111111111111111" );
    t.push_back( "0000000000000000000001111111111111111111110000000000000000000000" );
    t.push_back( "1111111111100000000001111111111100000000001111111111000000000000" );
    t.push_back( "1010101010101010101010101010101010101010101010101010101010101010" );
    t.push_back( "0100111110111010010111011010001001111111101000101101111110100011" );
    t.push_back( "0110110101001100100000111010001010111110100010100011101010110011" );
    t.push_back( "0110110110111100111011001010011001110110000100101111010110000011" );
    t.push_back( "0011010110101110100111011000001001100111101100000111011110100011" );
    t.push_back( "0100011010101110111111010000111011110011101100101111110100100011" );
    t.push_back( "0011110110111010111111001010000001010111011100101111110110100001" );

    HEngine_sn e( t, 10 );
    Matches r = e.query( "1111111101111011101110000100010001000100001110111111011110111111" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "1111111111111111111110000000000000000000001111111111111111111111", (*(r.begin())).first );


}

TEST( HEngine_sn, Query0_16 )
{
    BinTable t;
    for ( int i = 0; i < 16; i++ )
    {
        t.push_back( HEngine::number2BinStr( i ) );
    }

    HEngine_sn e( t, 6 );
    Matches r = e.query( 0 );
    EXPECT_EQ( 16, r.size() );
    auto b = r.begin();
    for ( int i = 0; i < 16; i++ )
    {
        EXPECT_EQ( i, HEngine::binStr2Number( (*b).first ) );
        b++;
    }
}

TEST( HEngine_sn, Query0_256 )
{
    BinTable t;
    for ( int i = 0; i < 512; i++ )
    {
        t.push_back( HEngine::number2BinStr( i ) );
    }

    HEngine_sn e( t, 6 );
    Matches r = e.query( 0 );

    //EXPECT_EQ( i, HEngine::binStr2Number( r[i].first ) );
    for ( int i = 0; i < 16; i++ )
    {
        //EXPECT_EQ( i, HEngine::binStr2Number( r[i].first ) );
    }
}
