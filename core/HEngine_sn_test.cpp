/**
 * @author VaL Doroshchuk
 * @license GNU GPL v2
 */

#include "HEngine_sn.h"
#include "gtest/gtest.h"

#include <algorithm>

using namespace hengine;

TEST( HEngine_sn, DefaultConstructor )
{
    HEngine_sn e( Table(), 0 );
}

TEST( HEngine_sn, Build )
{
    Table t;
    t.push_back( "1111111111111111111110000000000000000000001111111111111111111111" );
    t.push_back( "0000000000000000000001111111111111111111110000000000000000000000" );
    t.push_back( "1111111111100000000001111111111100000000001111111111000000000000" );
    t.push_back( "1010101010101010101010101010101010101010101010101010101010101010" );

    HEngine_sn e( t, 4 );

    const SignatureSet set = e.getSignatureSet();
    EXPECT_EQ( 3, set.size() );
    EXPECT_EQ( 4, set[0].size() );
    EXPECT_EQ( 4, set[1].size() );
    EXPECT_EQ( 4, set[2].size() );

    EXPECT_EQ( "000000000000000000000", set[0][0].second[0] );
    EXPECT_EQ( "111111111111111111111", set[0][0].second[1] );
    EXPECT_EQ( "0000000000000000000000", set[0][0].second[2] );

    EXPECT_EQ( "101010101010101010101", set[0][1].second[0] );
    EXPECT_EQ( "010101010101010101010", set[0][1].second[1] );
    EXPECT_EQ( "1010101010101010101010", set[0][1].second[2] );

    EXPECT_EQ( "111111111110000000000", set[0][2].second[0] );
    EXPECT_EQ( "111111111110000000000", set[0][2].second[1] );
    EXPECT_EQ( "1111111111000000000000", set[0][2].second[2] );

    EXPECT_EQ( "111111111111111111111", set[0][3].second[0] );
    EXPECT_EQ( "000000000000000000000", set[0][3].second[1] );
    EXPECT_EQ( "1111111111111111111111", set[0][3].second[2] );

    EXPECT_EQ( "000000000000000000000", set[1][0].second[0] );
    EXPECT_EQ( "111111111111111111111", set[1][0].second[1] );
    EXPECT_EQ( "1111111111111111111111", set[1][0].second[2] );

    EXPECT_EQ( "010101010101010101010", set[1][1].second[0] );
    EXPECT_EQ( "101010101010101010101", set[1][1].second[1] );
    EXPECT_EQ( "1010101010101010101010", set[1][1].second[2] );

    EXPECT_EQ( "0000000000000000000000", set[2][0].second[0] );
    EXPECT_EQ( "000000000000000000000", set[2][0].second[1] );
    EXPECT_EQ( "111111111111111111111", set[2][0].second[2] );

    EXPECT_EQ( "1010101010101010101010", set[2][1].second[0] );
    EXPECT_EQ( "101010101010101010101", set[2][1].second[1] );
    EXPECT_EQ( "010101010101010101010", set[2][1].second[2] );

}

TEST( HEngine_sn, Query )
{
    Table t;
    t.push_back( "1111111111111111111110000000000000000000001111111111111111111111" );
    t.push_back( "0000000000000000000001111111111111111111110000000000000000000000" );
    t.push_back( "1111111111100000000001111111111100000000001111111111000000000000" );
    t.push_back( "1010101010101010101010101010101010101010101010101010101010101010" );

    HEngine_sn e( t, 4 );
    QueryResult r = e.query( "1111111111111111111110000000000000000000001111111111111111111100" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "1111111111111111111110000000000000000000001111111111111111111111", r[0].first );

    r = e.query( "1111111111111111111110000000000000000000001111111111111111110000" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "1111111111111111111110000000000000000000001111111111111111111111", r[0].first );

    r = e.query( "1111111111111111111110000000000000000000001111111111111111100000" );
    EXPECT_EQ( 0, r.size() );

    r = e.query( "0000000000000001000001111111111111111111110000000000010000000000" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "0000000000000000000001111111111111111111110000000000000000000000", r[0].first );

    r = e.query( "1000000000000001000001111111111111111011110000000000010000000000" );
    EXPECT_EQ( 1, r.size() );
    EXPECT_EQ( "0000000000000000000001111111111111111111110000000000000000000000", r[0].first );

}
